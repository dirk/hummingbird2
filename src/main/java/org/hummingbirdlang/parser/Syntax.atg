COMPILER Syntax

CHARACTERS

letter = 'A'..'Z' + 'a'..'z'.
nonZeroDigit = "123456789".
digit = nonZeroDigit + "0".
tab = '\t'.
lf = '\n'.
cr = '\r'.
stringChar = ANY - "\"" - '\\' - cr - lf.

TOKENS

identifier = letter {letter | digit}.
let = "let".
var = "var".

COMMENTS FROM "//" TO lf
COMMENTS FROM "/*" TO "*/"

PRODUCTIONS

Syntax =
  Program<out Object statements>
                                 (. this.program = statements; .)
  .

Program<out Object result> =
  ProgramStatements<out result>.

ProgramStatements<out Object result> =
                                    (. List<Object> body = new ArrayList<>(); .)
  {
    Statement<out Object statement> (. body.add(statement); .)
  }
                                    (. result = body; .)
  .

Statement<out Object result> =
                               (. result = null; .)
  (
      LetDeclaration<out result>
    | VarDeclaration<out result>
  )
  .

LetDeclaration<out Object result> =
  let
  "="
  Expression<out Object expression> (. result = expression; .)
  .

VarDeclaration<out Object result> =
  var
  "="
  Expression<out Object expression> (. result = expression; .)
  .

Identifier<out Token result> =
  identifier (. result = t; .)
  .

Expression<out Object result> =
  AssignmentExpression<out result>.

AssignmentExpression<out Object result> =  (. result = null; .)
  TernaryExpression<out Object expression>
  [
    "="
    Expression<out Object newValueExpression>
  ]
  .

TernaryExpression<out Object result> =
                                                        (. result = null; .)
  LogicalOrExpression<out Object condOrValueExpression>
  [
    "?" LogicalOrExpression<out Object thenExpression>
    ":" LogicalOrExpression<out Object elseExpression>
  ]
  .

LogicalOrExpression<out Object result> =  (. result = null; .)
  LogicalAndExpression<out Object left>
  [
    "||"
    LogicalOrExpression<out Object right>
  ]
  .

LogicalAndExpression<out Object result> =  (. result = null; .)
  GroupExpression
  [
    "&&"
    LogicalAndExpression<out Object right>
  ]
  .

GroupExpression =
    (
      "(" Expression<out Object expression> ")"
    )
  |
    PostfixExpression
  .

PostfixExpression =
  Atom<out Token atom>.

Atom<out Token result> =
  Identifier<out result>.

END Syntax.
